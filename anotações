1) tipos primitivos
byte, short, int, long, float, double, char, boolean

2) variáveis
tipo nome = valor;

3) operadores (os mesmos de outras linguagens kkk)
Ariteméticos, Relacionais, Lógicos.

-------
Scanner em Java
necessário importar:import java.util.Scanner;
você cria um objeto Scanner ligado ao teclado: Scanner scanner = new Scanner(System.in);
"Crie um novo leitor de dados (Scanner) que vai ler aquilo que o usuário digitar no teclado (System.in)."

A partir daí, podemos usar métodos como:
nextInt() =	Um número inteiro (int)  -	int idade = scanner.nextInt();
nextDouble() =	Um número com ponto (double)  -	double altura = scanner.nextDouble();
next() =	Uma palavra (até espaço)  - 	String nome = scanner.next();
nextLine() =	Uma linha completa (com espaços)  -	String frase = scanner.nextLine();
next().charAt(0) =	Um único caractere (char)  -	char letra = scanner.next().charAt(0);

Sempre que possível, feche o Scanner com scanner.close(); ao final do programa.
-------
Estruturas de controle
-  decisões sejam tomadas (if, switch)
-  ações sejam repetidas (while, for)

if (condição) {
    // código se for verdadeiro
} else {
    // código se for falso (opcional)
}

switch (variavel) {
    case valor1:
        // código
        break;
    case valor2:
        // código
        break;
    default:
        // se nenhum dos casos anteriores for verdadeiro
}
while (condição) {
    // repete enquanto a condição for verdadeira
}
for (inicialização; condição; incremento) {
    // código a ser repetido
}

---------
Métodos: definição, parâmetros, retorno
Métodos são blocos de código que realizam uma tarefa específica.
Eles são usados para organizar o programa, evitar repetição e facilitar a leitura.

tipoDeRetorno nomeDoMetodo(parâmetros) {
    // corpo do método
    return valor;
}
    EX:public static int somar(int a, int b) {
           int resultado = a + b;
           return resultado;
       }

Parâmetros: são variáveis usadas para enviar informações para o método
public static void exibirMensagem(String nome) {
    System.out.println("Olá, " + nome);
}
Retorno: um método pode retornar um valor, ou não retornar nada.
public static int dobrar(int numero) {
    return numero * 2;
}
public static void mostrarMensagem() {
    System.out.println("Bem-vindo!");
}
-> utilzamos void porque ele não retorna valor, só exibe algo

Como CHAMAR(usar) um método
int resultado = somar(5, 3); // resultado agora vale 8
mostrarMensagem();           // imprime no console

EXEMPLO COMPLETO: public class Calculadora {

                     // método que soma
                     public static int somar(int a, int b) {
                         return a + b;
                     }

                     // método que imprime mensagem
                     public static void saudacao(String nome) {
                         System.out.println("Olá, " + nome);
                     }

                     public static void main(String[] args) {
                         saudacao("Carlos");                   // imprime Olá, Carlos
                         int total = somar(10, 5);             // total = 15
                         System.out.println("Resultado: " + total);
                     }
                 }
-----------
Classes e Objetos: conceitos iniciais
Uma classe é um modelo (ou molde) para criar objetos. Pense nela como uma forma de bolo: ela define como o bolo será, mas não é o bolo em si.
Um objeto é uma instância real da classe. Se a classe é a forma de bolo, o objeto é o bolo feito com ela.

    EX:public class Pessoa {
           String nome;
           int idade;

           void apresentar() {
               System.out.println("Olá, meu nome é " + nome + " e tenho " + idade + " anos.");
           }
       }
 Essa classe define:
    Atributos: nome e idade (as características da pessoa).
    Método: apresentar() (o comportamento da pessoa).

    public class Main {
        public static void main(String[] args) {
            Pessoa p1 = new Pessoa();     // cria o objeto p1 do tipo Pessoa
            p1.nome = "Maria";
            p1.idade = 25;
            p1.apresentar();              // chama o método
        }
    }
Objeto: Uma instância da classe, com dados reais.
Pessoa p1 = new Pessoa(); → cria um objeto chamado p1
p1.nome = "Maria"; → define o nome
p1.apresentar(); → chama o comportamento da classe

-----------
Main, construtores e atributos
Main: ponto de entrada de um programa Java
    public static void main(String[] args) {
        // código aqui
    }
public: significa que o método pode ser acessado de qualquer lugar.
static: indica que esse método não precisa de um objeto para ser executado.
void: significa que o método não retorna nada.
main: nome do método.
String[] args: parâmetro que permite passar argumentos pela linha de comando.

Construtores: é um método especial usado para criar objetos de uma classe.
Tem o mesmo nome da classe. Não tem tipo de retorno, nem void. Pode ter parâmetros ou não.
public class Pessoa {
    String nome;

    // Construtor
    public Pessoa(String nomeRecebido) {
        nome = nomeRecebido;
    }
}
public class Pessoa {
    String nome;
    int idade;

    // Construtor que recebe nome e idade
    public Pessoa(String n, int i) {
        nome = n;
        idade = i;
    }
}

Atributos: são as características ou informações de um objetos/ Variáveis de instância.
public class Carro {
    String cor;
    int ano;
} // COR E ANO SÃO ATRIBUTOS

---------------------
Encapsulamento: private, public, getters/setters

private String nome;
private: Esconde o atributo ou método de fora da classe.
Só pode ser acessado dentro da própria classe.
Usado para proteger os dados.

public String getNome() {
    return nome;
}
public: Permite que qualquer parte do programa possa acessar aquele atributo ou método.
Em atributos, é perigoso. Mas é muito comum em métodos (como get e set).

Getters e Setters:Já que private bloqueia o acesso direto, usamos métodos get e set para acessar e modificar os dados de forma controlada.

Getter (pegar valor):
public String getNome() {
    return nome;
}
Setter (alterar valor):
public void setNome(String novoNome) {
    nome = novoNome;
}
EXEMPLO COMPLETO COM EXPLICAÇÃO:
public class Aluno {
    // Atributos encapsulados (privados)
    private String nome;
    private int idade;

    // Construtor
    public Aluno(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }

    // Getter para nome
    public String getNome() {
        return nome;
    }

    // Setter para nome
    public void setNome(String nome) {
        this.nome = nome;
    }

    // Getter para idade
    public int getIdade() {
        return idade;
    }

    // Setter para idade
    public void setIdade(int idade) {
        this.idade = idade;
    }
}
NO MAIN:
public class Principal {
    public static void main(String[] args) {
        Aluno a = new Aluno("Lucas", 22);

        // Usando getter
        System.out.println("Nome: " + a.getNome());
        System.out.println("Idade: " + a.getIdade());

        // Alterando com setter
        a.setNome("Marina");
        a.setIdade(20);

        System.out.println("Novo Nome: " + a.getNome());
        System.out.println("Nova Idade: " + a.getIdade());
    }
}
